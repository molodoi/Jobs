<?xml version="1.0"?>
<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:ObjectManager/etc/config.xsd">
    <!-- Create our type DepartmentGridDataProvider -->
    <!-- 
    En premier lieu, nous créons notre objet de type DepartmentGridDataProvider qui est défini par deux éléments :
    – collection : Nous lui envoyons ici notre classe Ticme\Jobs\Model\Resource\Department\Collection que nous avons déjà créée
    – filterPool : Ici nous renseignons un nouvel objet que l’on défini juste après.

    Nous créons donc maintenant notre objet DepartmentGridFilterPool, qui fait appel à 2 classes natives de Magento. Vous pouvez y jeter un oeil pour votre culture, mais je n’irai pas plus loin ici.

    Enuite, nous avions défini un dataProvider dans notre uiComponent. Ce dataProvider était nommé jobs_department_listing_data_source.
    C’est cet élément que nous mettons en place dans la 3è partie. Nous déclarons que ce dataProvider fera appel à la classe « Ticme\Jobs\Model\ResourceModel\Grid\Department\Collection ».

    Le soucis c’est que cette classe n’existe pas. Et au lieu de la créer, nous allons la définir dans ce di.xml.
    Comme vous le constatez nous avons 2 arguments très simples :
    – mainTable : qui est la table qui contient les éléments que l’on souhaite afficher.
    – resourceModel : qui pointe vers le resourceModel de notre objet Department.
    -->


    <!-- Create our type DepartmentGridDataProvider -->
    <!-- En premier lieu, nous créons notre objet de type DepartmentGridDataProvider qui est défini par deux éléments -->
    <virtualType name="DepartmentGridDataProvider" type="Magento\Framework\View\Element\UiComponent\DataProvider\DataProvider">
        <arguments>
            <!-- collection : Nous lui envoyons ici notre classe Ticme\Jobs\Model\Resource\Department\Collection que nous avons déjà créée -->
            <argument name="collection" xsi:type="object" shared="false">Ticme\Jobs\Model\Resource\Department\Collection</argument>

            <!-- filterPool : Ici nous renseignons un nouvel objet que l’on défini juste après. -->
            <argument name="filterPool" xsi:type="object" shared="false">DepartmentGridFilterPool</argument> <!-- Define new object for filters -->
        </arguments>
    </virtualType>
 
    <!-- Create our type DepartmentGridFilterPool -->
    <!-- Nous créons donc maintenant notre objet DepartmentGridFilterPool, -->
    <virtualType name="DepartmentGridFilterPool" type="Magento\Framework\View\Element\UiComponent\DataProvider\FilterPool">
        <arguments>
            <argument name="appliers" xsi:type="array">
                <!-- qui fait appel à 2 classes natives de Magento | y jeter un oeil pour votre culture -->
                <item name="regular" xsi:type="object">Magento\Framework\View\Element\UiComponent\DataProvider\RegularFilter</item>
                <item name="fulltext" xsi:type="object">Magento\Framework\View\Element\UiComponent\DataProvider\FulltextFilter</item>
            </argument>
        </arguments>
    </virtualType>
 
    <!-- Type for jobs_department_listing_data_source -->
    <!-- 
    nous avions défini un dataProvider dans notre uiComponent. Ce dataProvider était nommé jobs_department_listing_data_source.
    C'est cet élément que nous mettons en place dans la 3è partie. Nous déclarons que ce dataProvider fera appel à la classe Ticme\Jobs\Model\ResourceModel\Grid\Department\Collection
    Le soucis c’est que cette classe n’existe pas. Et au lieu de la créer, nous allons la définir dans ce di.xml.
    -->
    <type name="Magento\Framework\View\Element\UiComponent\DataProvider\CollectionFactory">
        <arguments>
            <argument name="collections" xsi:type="array">
                <!-- Type for jobs_department_listing_data_source -->
                <item name="jobs_department_listing_data_source" xsi:type="string">Ticme\Jobs\Model\ResourceModel\Grid\Department\Collection</item>
                <!-- Type for jobs_job_listing_data_source -->
                <item name="jobs_job_listing_data_source" xsi:type="string">Ticme\Jobs\Model\ResourceModel\Grid\Job\Collection</item>
            </argument>
        </arguments>
    </type>
 
    <!-- Simulate our class Ticme\Jobs\Model\ResourceModel\Grid\Department\Collection -->
    <virtualType name="Ticme\Jobs\Model\ResourceModel\Grid\Department\Collection" type="Magento\Framework\View\Element\UiComponent\DataProvider\SearchResult">
        <arguments>
            <!-- 
                – mainTable : qui est la table qui contient les éléments que l’on souhaite afficher.
             -->
            <argument name="mainTable" xsi:type="string">ticme_department</argument>

            <!-- 
                – resourceModel : qui pointe vers le resourceModel de notre objet Department.
             -->            
            <argument name="resourceModel" xsi:type="string">Ticme\Jobs\Model\ResourceModel\Department</argument>
        </arguments>
    </virtualType>
 
    <!-- Create our type JobGridDataProvider -->
    <virtualType name="JobGridDataProvider" type="Magento\Framework\View\Element\UiComponent\DataProvider\DataProvider">
        <arguments>
            <argument name="collection" xsi:type="object" shared="false">Ticme\Jobs\Model\Resource\Job\Collection</argument>
            <argument name="filterPool" xsi:type="object" shared="false">JobGridFilterPool</argument> <!-- Define new object for filters -->
        </arguments>
    </virtualType>
 
    <!-- Create our type JobGridFilterPool -->
    <virtualType name="JobGridFilterPool" type="Magento\Framework\View\Element\UiComponent\DataProvider\FilterPool">
        <arguments>
            <argument name="appliers" xsi:type="array">
                <item name="regular" xsi:type="object">Magento\Framework\View\Element\UiComponent\DataProvider\RegularFilter</item>
                <item name="fulltext" xsi:type="object">Magento\Framework\View\Element\UiComponent\DataProvider\FulltextFilter</item>
            </argument>
        </arguments>
    </virtualType>
 
    <!-- Simulate our class Ticme\Jobs\Model\ResourceModel\Grid\Job\Collection -->
    <virtualType name="Ticme\Jobs\Model\ResourceModel\Grid\Job\Collection" type="Magento\Framework\View\Element\UiComponent\DataProvider\SearchResult">
        <arguments>
            <argument name="mainTable" xsi:type="string">ticme_job</argument>
            <argument name="resourceModel" xsi:type="string">Ticme\Jobs\Model\ResourceModel\Job</argument>
        </arguments>
    </virtualType>

    <!-- Logger and Handler -->
    <type name="Ticme\Jobs\Logger\Handler">
        <arguments>
            <argument name="filesystem" xsi:type="object">Magento\Framework\Filesystem\Driver\File</argument>
        </arguments>
    </type>
    <type name="Ticme\Jobs\Logger\Logger">
        <arguments>
            <argument name="name" xsi:type="string">ticmeJobs</argument>
            <argument name="handlers"  xsi:type="array">
                <item name="system" xsi:type="object">Ticme\Jobs\Logger\Handler</item>
            </argument>
        </arguments>
    </type>
</config>